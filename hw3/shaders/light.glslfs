#version 330 core

uniform sampler2D gbuffer_pos;
uniform sampler2D gbuffer_norm;
uniform sampler2D gbuffer_diffuse;
uniform sampler2D gbuffer_specular;

out vec4 out_light;

struct Light {
    vec3 position;
    float size;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};
uniform Light light;
uniform vec2 window;
uniform vec3 camera;
uniform float gamma;

void main()
{
    vec2 uv = gl_FragCoord.xy / window;
    vec3 position = texture(gbuffer_pos, uv).xyz;
    vec3 normal = texture(gbuffer_norm, uv).xyz;
    vec3 kd = texture(gbuffer_diffuse, uv).rgb;
    vec3 ka = kd;
    vec4 ks = texture(gbuffer_specular, uv).rgba;

    kd = pow(kd, vec3(gamma));
    ka = pow(ka, vec3(gamma));
    ks.rgb = pow(ks.rgb, vec3(gamma));

    vec3 ambient = pow(light.ambient, vec3(gamma));
    vec3 diffuse = pow(light.diffuse, vec3(gamma));
    vec3 specular = pow(light.specular, vec3(gamma));

    // Ambient
    ambient *= ka;

    // Diffuse
    vec3 norm = normalize(normal);
    vec3 lightDir = normalize(light.position - position);
    float diff = max(dot(norm, lightDir), 0.0);
    diffuse *= diff * kd;  

    // Specular
    vec3 viewDir = normalize(camera - position);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 16.0);
    specular *= spec * ks.rgb;

    float d = distance(light.position, position) / light.size;
    float softEdge = 0.75;
    float hardEdge = 0.95;
    float a = 1.0;
    if (d > softEdge) {
        a *= 1.0 / (0.1 + 2 * softEdge + 10 * (softEdge * softEdge));
        a *= 1.0 - clamp(d - softEdge, 0.0, hardEdge - softEdge) / (hardEdge - softEdge);
    } else {
        a *= 1.0 / (0.1 + 2 * d + 10 * (d * d));
    }
    diffuse *= a;
    specular *= a;

    out_light = vec4(ambient + diffuse + specular, 1);
}
